<?php include __DIR__ . '/../inc/header.phtml'; ?>
<?php include __DIR__ . '/../inc/nav.phtml'; ?>
            <main class="col-right bg-white overflow-y-auto pl-24 pr-24 pt-12 pb-12 max-[976px]:pl-12 max-[976px]:pr-12 max-[976px]:pt-4 max-[976px]:pb-4 dark:text-gray-300 dark:bg-gray-900">
                <div class="main-content">
<?php if (!empty($segments)):
    include __DIR__ . '/../inc/breadcrumb.phtml';
endif; ?>
                    <h2><?=$title; ?></h2>
                    <p>The Popcorn PHP Micro-Framework is a lightweight <strong>REST</strong> micro-framework that's built
                        on top of the Pop PHP Framework core components. With it, you can rapidly wire together
                        the routes and configuration needed for your REST-based web application, while leveraging
                        the pre-existing features and functionality of the Pop PHP Framework. It provides a simple
                        layer on top of the main <code class="inline-code">Pop\Application</code> object that allows you to wire up routes and
                        enforce their access based on the request method. By default, it ships with <code class="inline-code">popphp/popphp</code>,
                        <code class="inline-code">popphp/pop-http</code>, <code class="inline-code">popphp/pop-session</code>
                        and <code class="inline-code">popphp/pop-view</code> components.</p>
                    <h4 id="basic">Basic Use</h4>
                    <p>In a simple <code class="inline-code">index.php</code> file, you can define the routes you want to allow in your application.
                        In this example, closures are used as the controllers. The wildcard route <code class="inline-code">*</code> can serve as a
                        "catch-all" to handle routes that are not found or not allowed.</p>
                    <pre><code class="language-php">use Popcorn\Pop;

$app = new Pop();

// Home page: GET http://localhost/
$app->get('/', function() {
    echo 'Hello World!';
});

// Say hello page: GET http://localhost/hello/world
$app->get('/hello/:name', function($name) {
    echo 'Hello ' . ucfirst($name) . '!';
});

// Wildcard route to handle errors
$app->get('*', function() {
    header('HTTP/1.1 404 Not Found');
    echo 'Page Not Found.';
});</code><a href="#" title="Copy" class="copy-link" x-data="copyCode" x-on:click.prevent="copy($el)"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 relative"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z" /></svg></a></pre>
                    <p>The above example defines two <code class="inline-code">GET</code> routes and wildcard to handle failures.
                        We can define a <code class="inline-code">POST</code> route like in this example below:</p>
                    <pre><code class="language-php">// Post auth route: POST http://localhost/auth
$app->post('/auth', function() {
    if ($_SERVER['HTTP_AUTHORIZATION'] == 'my-token') {
        echo 'Auth successful';
    } else {
        echo 'Auth failed';
    }
});

$app->run();</code><a href="#" title="Copy" class="copy-link" x-data="copyCode" x-on:click.prevent="copy($el)"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 relative"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z" /></svg></a></pre>
                    <pre><code class="language-bash">curl -X POST --header "Authorization: bad-token" http://localhost:8000/auth
Auth failed

curl -X POST --header "Authorization: my-token" http://localhost:8000/auth
Auth successful</code><a href="#" title="Copy" class="copy-link" x-data="copyCode" x-on:click.prevent="copy($el)"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 relative"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z" /></svg></a></pre>
                    <h4 id="advanced" class="mt-4">Advanced Use</h4>
                    <p>In a more advanced example, we can take advantage of more of an MVC-style of wiring up an application
                        using the core components of Pop PHP with Popcorn. Let's look at a controller
                        class <code class="inline-code">MyApp\Controller\IndexController</code> like this:</p>
                    <pre><code class="language-php">namespace MyApp\Controller;

use Pop\Controller\AbstractController;
use Pop\Http\Server\Request;
use Pop\Http\Server\Response;
use Pop\View\View;

class IndexController extends AbstractController
{

    protected Request  $request;
    protected Response $response;
    protected string   $viewPath;

    public function __construct(
        Request $request = new Request(), Response $response = new Response()
    )
    {
        $this->request  = $request;
        $this->response = $response;
        $this->viewPath = __DIR__ . '/../view/';
    }

    public function index(): void
    {
        $view        = new View($this->viewPath . '/index.phtml');
        $view->title = 'Hello';

        $this->response->setBody($view->render());
        $this->response->send();
    }

    public function hello($name): void
    {
        $view        = new View($this->viewPath . '/index.phtml');
        $view->title = 'Hello ' . $name;
        $view->name  = $name;

        $this->response->setBody($view->render());
        $this->response->send();
    }

    public function error(): void
    {
        $view        = new View($this->viewPath . '/error.phtml');
        $view->title =  'Error';

        $this->response->setBody($view->render());
        $this->response->send(404);
    }

}</code><a href="#" title="Copy" class="copy-link" x-data="copyCode" x-on:click.prevent="copy($el)"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 relative"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z" /></svg></a></pre>
                    <p>and two view scripts, <code class="inline-code">index.phtml</code> and <code class="inline-code">error.phtml</code>, respectively:</p>
                    <pre><code class="language-php-template">&lt;!DOCTYPE html&gt;
&lt;!-- index.phtml //--&gt;
&lt;html&gt;

&lt;head&gt;
    &lt;title&gt;&lt;?=$title; ?&gt;&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;h1&gt;&lt;?=$title; ?&gt;&lt;/h1&gt;
&lt;?php if (isset($name)): ?&gt;
    &lt;p&gt;Your name is &lt;?=$name; ?&gt;&lt;/p&gt;
&lt;?php endif; ?&gt;
&lt;/body&gt;

&lt;/html&gt;</code><a href="#" title="Copy" class="copy-link" x-data="copyCode" x-on:click.prevent="copy($el)"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 relative"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z" /></svg></a></pre>
                    <pre><code class="language-php-template">&lt;!DOCTYPE html&gt;
&lt;!-- error.phtml //--&gt;
&lt;html&gt;

&lt;head&gt;
    &lt;title&gt;&lt;?=$title; ?&gt;&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;h1 style="color: #f00;"&gt;&lt;?=$title; ?&gt;&lt;/h1&gt;
    &lt;p&gt;Sorry, that page was not found.&lt;/p&gt;
&lt;/body&gt;

&lt;/html&gt;</code><a href="#" title="Copy" class="copy-link" x-data="copyCode" x-on:click.prevent="copy($el)"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 relative"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z" /></svg></a></pre>
                    <p>Then we can set the app like this:</p>
                    <pre><code class="language-php">use Popcorn\Pop;

$app = new Pop();

$app->get('/', [
    'controller' => 'MyApp\Controller\IndexController',
    'action'     => 'index',
    'default'    => true
])->get('/hello/:name', [
    'controller' => 'MyApp\Controller\IndexController',
    'action'     => 'hello'
]);

$app->run();</code><a href="#" title="Copy" class="copy-link" x-data="copyCode" x-on:click.prevent="copy($el)"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 relative"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z" /></svg></a></pre>
                    <p>The <code class="inline-code">default</code> parameter sets the controller as the default controller to handle routes that aren't found. Typically, there is a default action in the controller, such as an <code class="inline-code">error</code> method, to handle this.</p>
                    <h4 id="routes">Routes</h4>
                    <p>As in the above examples, you can use the API to define routes directly:</p>
                    <ul class="list-disc ml-8">
                        <li><code class="inline-code">get($route, $controller)</code></li>
                        <li><code class="inline-code">head($route, $controller)</code></li>
                        <li><code class="inline-code">post($route, $controller)</code></li>
                        <li><code class="inline-code">put($route, $controller)</code></li>
                        <li><code class="inline-code">delete($route, $controller)</code></li>
                        <li><code class="inline-code">trace($route, $controller)</code></li>
                        <li><code class="inline-code">options($route, $controller)</code></li>
                        <li><code class="inline-code">connect($route, $controller)</code></li>
                        <li><code class="inline-code">patch($route, $controller)</code></li>
                    </ul>
                    <p>Or, you can use the standard <code class="inline-code">Pop\Application</code> route configuration array
                        for <code class="inline-code">Popcorn</code> by nesting the routes inside another array level, with the
                        array keys being the defined method:</p>
                    <pre><code class="language-php">// Routes configuration
$config = [
    'routes' => [
        'get' => [
            '/users' => [
                'controller' => 'MyApp\Http\Controller\UsersController',
                'action'     => 'index'
            ]
        ],
        'post' => [
            '/users' => [
                'controller' => 'MyApp\Http\Controller\UsersController',
                'action'     => 'create'
            ]
        ],
        'patch' => [
            '/users/:id' => [
                'controller' => 'MyApp\Http\Controller\UsersController',
                'action'     => 'update'
            ]
        ],
        'delete' => [
            '/users/:id' => [
                'controller' => 'MyApp\Http\Controller\UsersController',
                'action'     => 'delete'
            ]
        ]
    ]
];

$app = new Pop($config);</code><a href="#" title="Copy" class="copy-link" x-data="copyCode" x-on:click.prevent="copy($el)"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 relative"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z" /></svg></a></pre>
                    <h4 id="custom" class="mt-4">Custom Methods</h4>
                    <p>If your web server allows the configuration of custom HTTP methods, Popcorn supports that and allows you to register custom HTTP methods with the application.</p>
                    <pre><code class="language-php">use Popcorn\Pop;

$app = new Pop();
$app->addCustomMethod('PURGE')
    ->addCustomMethod('COPY');

$app->purge('/image/:id', function($id){
    // Do something with the PURGE method on the image URL
});

$app->copy('/image/:id', function($id){
    // Do something with the COPY method on the image URL
});

$app->run();</code><a href="#" title="Copy" class="copy-link" x-data="copyCode" x-on:click.prevent="copy($el)"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 relative"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z" /></svg></a></pre>
                    <p>Then you can submit requests with your custom HTTP methods like this:</p>
                    <pre><code class="language-bash">curl -X PURGE http://localhost/image/1
curl -X COPY http://localhost/image/1</code><a href="#" title="Copy" class="copy-link" x-data="copyCode" x-on:click.prevent="copy($el)"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 relative"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z" /></svg></a></pre>
                    <h4 id="api" class="mt-4">API</h4>
                    <p>Here is an overview of the available API within the <code class="inline-code">Popcorn\Pop</code> class:</p>
                    <ul class="list-disc ml-8">
                        <li><code class="inline-code">get($route, $controller)</code><span class="text-sm"> - Set a GET route</span></li>
                        <li><code class="inline-code">head($route, $controller)</code><span class="text-sm"> - Set a HEAD route</span></li>
                        <li><code class="inline-code">post($route, $controller)</code><span class="text-sm"> - Set a POST route</span></li>
                        <li><code class="inline-code">put($route, $controller)</code><span class="text-sm"> - Set a PUT route</span></li>
                        <li><code class="inline-code">delete($route, $controller)</code><span class="text-sm"> - Set a DELETE route</span></li>
                        <li><code class="inline-code">trace($route, $controller)</code><span class="text-sm"> - Set a TRACE route</span></li>
                        <li><code class="inline-code">options($route, $controller)</code><span class="text-sm"> - Set an OPTIONS route</span></li>
                        <li><code class="inline-code">connect($route, $controller)</code><span class="text-sm"> - Set a CONNECT route</span></li>
                        <li><code class="inline-code">patch($route, $controller)</code><span class="text-sm"> - Set a PATCH route</span></li>
                        <li><code class="inline-code">setRoute($method, $route, $controller)</code><span class="text-sm"> - Set a specific route</span></li>
                        <li><code class="inline-code">setRoutes($methods, $route, $controller)</code><span class="text-sm"> - Set a specific route and apply to multiple methods at once</span></li>
                        <li><code class="inline-code">addToAll($route, $controller)</code><span class="text-sm"> - Set a specific route to all methods at once</span></li>
                        <li><code class="inline-code">any($route, $controller)</code><span class="text-sm"> - Set a specific route to all methods at once (alias to 'addToAll')</span></li>
                        <li><code class="inline-code">addCustomMethod($customMethod)</code><span class="text-sm"> - Add a custom method</span></li>
                        <li><code class="inline-code">hasCustomMethod($customMethod)</code><span class="text-sm"> - Check if the object has a custom method</span></li>
                    </ul>
                    <p>The <code class="inline-code">setRoutes()</code> method allows you to set a specific route and
                       apply it to multiple methods all at once, like this:</p>
                    <pre><code class="language-php">use Popcorn\Pop;

$app = new Pop();

$app->setRoutes('get,post', '/login', [
    'controller' => 'MyApp\Controller\IndexController',
    'action'     => 'login'
]);

$app->run();</code><a href="#" title="Copy" class="copy-link" x-data="copyCode" x-on:click.prevent="copy($el)"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 relative"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z" /></svg></a></pre>
                    <p>In the above example, the route <code class="inline-code">/login</code> could display the login form on
                        <code class="inline-code">GET</code>, and then accept the login form submission on <code class="inline-code">POST</code>.</p>
                </div>
<?php include __DIR__ . '/../inc/footer.phtml'; ?>
